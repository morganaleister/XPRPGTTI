//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controllers/KM/ActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class MyActionsMaps : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public MyActionsMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionsMap"",
    ""maps"": [
        {
            ""name"": ""KM"",
            ""id"": ""860fcff1-8819-4654-850b-d6e236b28459"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""9ed7e3e9-4608-49cf-8743-6de7cc6e759f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""d33bf0a2-d8f5-4253-9150-c31f55bada4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0b44589-b3d1-46d7-bf5d-359d4561c980"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8041de9-774a-4af1-8c70-47e3d6affe22"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""1a6e9427-17de-42af-8d22-c72d1180fdb8"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""8ee31d6b-f139-4f57-a8ad-b7ecc67a6587"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e9a39ffc-ac48-4ac8-b362-75f54b075475"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KM
        m_KM = asset.FindActionMap("KM", throwIfNotFound: true);
        m_KM_Select = m_KM.FindAction("Select", throwIfNotFound: true);
        m_KM_Open = m_KM.FindAction("Open", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Newaction = m_Touch.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KM
    private readonly InputActionMap m_KM;
    private IKMActions m_KMActionsCallbackInterface;
    private readonly InputAction m_KM_Select;
    private readonly InputAction m_KM_Open;
    public struct KMActions
    {
        private MyActionsMaps m_Wrapper;
        public KMActions(MyActionsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_KM_Select;
        public InputAction @Open => m_Wrapper.m_KM_Open;
        public InputActionMap Get() { return m_Wrapper.m_KM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KMActions set) { return set.Get(); }
        public void SetCallbacks(IKMActions instance)
        {
            if (m_Wrapper.m_KMActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Open.started -= m_Wrapper.m_KMActionsCallbackInterface.OnOpen;
                @Open.performed -= m_Wrapper.m_KMActionsCallbackInterface.OnOpen;
                @Open.canceled -= m_Wrapper.m_KMActionsCallbackInterface.OnOpen;
            }
            m_Wrapper.m_KMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Open.started += instance.OnOpen;
                @Open.performed += instance.OnOpen;
                @Open.canceled += instance.OnOpen;
            }
        }
    }
    public KMActions @KM => new KMActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_Touch_Newaction;
    public struct TouchActions
    {
        private MyActionsMaps m_Wrapper;
        public TouchActions(MyActionsMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Touch_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface IKMActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnOpen(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
