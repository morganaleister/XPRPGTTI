//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controllers/KM/ActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionsMap"",
    ""maps"": [
        {
            ""name"": ""KM"",
            ""id"": ""860fcff1-8819-4654-850b-d6e236b28459"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""9ed7e3e9-4608-49cf-8743-6de7cc6e759f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hover"",
                    ""type"": ""Value"",
                    ""id"": ""ac1c80e9-8a65-4d50-8b07-a1615a996a60"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""fe3fedab-f437-495e-9c7a-10f67da27665"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0b44589-b3d1-46d7-bf5d-359d4561c980"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43e382aa-7d2c-4f59-be6f-46ad2ddac566"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b21c9ef6-5fac-4cb1-bf48-efe1a8f1b2fa"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KM
        m_KM = asset.FindActionMap("KM", throwIfNotFound: true);
        m_KM_Select = m_KM.FindAction("Select", throwIfNotFound: true);
        m_KM_Hover = m_KM.FindAction("Hover", throwIfNotFound: true);
        m_KM_Menu = m_KM.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KM
    private readonly InputActionMap m_KM;
    private IKMActions m_KMActionsCallbackInterface;
    private readonly InputAction m_KM_Select;
    private readonly InputAction m_KM_Hover;
    private readonly InputAction m_KM_Menu;
    public struct KMActions
    {
        private @ActionsMap m_Wrapper;
        public KMActions(@ActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_KM_Select;
        public InputAction @Hover => m_Wrapper.m_KM_Hover;
        public InputAction @Menu => m_Wrapper.m_KM_Menu;
        public InputActionMap Get() { return m_Wrapper.m_KM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KMActions set) { return set.Get(); }
        public void SetCallbacks(IKMActions instance)
        {
            if (m_Wrapper.m_KMActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_KMActionsCallbackInterface.OnSelect;
                @Hover.started -= m_Wrapper.m_KMActionsCallbackInterface.OnHover;
                @Hover.performed -= m_Wrapper.m_KMActionsCallbackInterface.OnHover;
                @Hover.canceled -= m_Wrapper.m_KMActionsCallbackInterface.OnHover;
                @Menu.started -= m_Wrapper.m_KMActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_KMActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_KMActionsCallbackInterface.OnMenu;
            }
            m_Wrapper.m_KMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Hover.started += instance.OnHover;
                @Hover.performed += instance.OnHover;
                @Hover.canceled += instance.OnHover;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
            }
        }
    }
    public KMActions @KM => new KMActions(this);
    public interface IKMActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnHover(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
